{"version":3,"sources":["Line.js","FreqInput.js","App.js","serviceWorker.js","index.js"],"names":["Line","props","line","setSelectedLine","color","selected","styles","transform","concat","backgroundColor","borderColor","react_default","a","createElement","className","id","onClick","style","data-freq","log","_console","console","apply","arguments","getLineX","e","sel","event","parent","box","getBoundingClientRect","Object","objectSpread","left","clientX","top","clientY","getRelativeMouse","document","querySelector","lineWidth","FreqInput","_useState","useState","_useState2","slicedToArray","lines","setLines","_useState3","_useState4","_useState5","_useState6","tempLine","setTempLine","moveLine","x","buttons","onSelectLine","makeLine","i","key","src_Line","lineElements","map","tempLineElement","onMouseMove","onMouseDown","onMouseUp","includes","toConsumableArray","App","src_FreqInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAwBeA,MArBf,SAAcC,GAAO,IACVC,EAAmCD,EAAnCC,KAAMC,EAA6BF,EAA7BE,gBACPC,EADoCH,EAAZI,SACL,MAAQ,QAC3BC,EAAS,CACbC,UAAS,cAAAC,OAAgBN,EAAhB,OACTE,QACAK,gBAAiBL,EACjBM,YAAaN,GAEf,OACCO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVC,GAAIb,EACJc,QAASb,EACTc,MAAOX,EACPY,YAAWhB,GAEbS,EAAAC,EAAAC,cAAA,aAAQX,KCfViB,SAAM,eAAAC,EAAA,OAAUA,EAAAC,SAAQF,IAARG,MAAAF,EAAAG,aAYhBC,EAAW,SAACC,GACZ,IAZKC,EAeL,OAbmB,SAACC,EAAOC,GAC/B,IAAMC,EAAMD,EAAOE,wBACnB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFF,EADL,CAEEI,KAAMN,EAAMO,QAAUL,EAAII,KAC1BE,IAAKR,EAAMS,QAAUP,EAAIM,MAMVE,CAAiBZ,GAbzBC,EAYO,aAZCY,SAASC,cAAcb,KAa/BO,KACUO,GAIfA,EAAY,IA8CHC,MA7Cf,WAAqB,IAAAC,EACOC,mBAAS,CAAC,GAAG,MADpBC,EAAAb,OAAAc,EAAA,EAAAd,CAAAW,EAAA,GACZI,EADYF,EAAA,GACLG,EADKH,EAAA,GAAAI,EAEqBL,qBAFrBM,EAAAlB,OAAAc,EAAA,EAAAd,CAAAiB,EAAA,GAAAE,GAAAD,EAAA,GAAAA,EAAA,GAGaN,sBAHbQ,EAAApB,OAAAc,EAAA,EAAAd,CAAAmB,EAAA,GAGZE,EAHYD,EAAA,GAGFE,EAHEF,EAAA,GAKbG,EAAW,SAAC7B,GAChB,IAAM8B,EAAmB,IAAd9B,EAAE+B,QAAiBhC,EAASC,GAAK,KACxC8B,GACFF,EAAYE,IAWVE,EAAe,SAAChC,GACpBN,EAAI,QAEFd,GAAW,EACTqD,EAAW,SAACxD,EAAMyD,GACtB,GAAKzD,EAAL,CACA,IAAM0D,EAAG,GAAApD,OAAMN,EAAN,MAAAM,OAAemD,GACxB,OAAQhD,EAAAC,EAAAC,cAACgD,EAAD,CAAMD,IAAKA,EAAKvD,SAAUA,EAAUoD,aAAcA,EAAcvD,KAAMA,MAE1E4D,EAAehB,EAAMiB,IAAIL,GAC/BrD,GAAW,EACX,IAAM2D,EAAkBN,EAASN,GACjC,OACEzC,EAAAC,EAAAC,cAAA,OACEE,GAAG,YACHD,UAAU,YACVmD,YAAaX,EACbY,YAAaZ,EACba,UA1Bc,SAAC1C,GACf,IAAM8B,EAAI/B,EAASC,GACf8B,IAAMT,EAAMsB,SAASb,KACvBR,EAAQ,GAAAvC,OAAAuB,OAAAsC,EAAA,EAAAtC,CAAKe,GAAL,CAAYS,KACpBF,EAAY,SAwBbS,EACAE,ICpDQM,0LANX,OACE3D,EAAAC,EAAAC,cAAC0D,EAAD,aAHYC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAAS1C,SAAS2C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e80098f1.chunk.js","sourcesContent":["import React from 'react';\nimport './Line.css';\n\nfunction Line(props) {\n    const {line, setSelectedLine, selected} = props;\n    const color = selected ? 'red' : 'black';\n    const styles = {\n      transform: `translateX(${line}px)`,\n      color,\n      backgroundColor: color,\n      borderColor: color\n    };\n    return (\n     <div className=\"line\" \n          id={line} \n          onClick={setSelectedLine}\n          style={styles} \n          data-freq={line}\n      >\n        <label>{line}</label>\n      </div>\n    );\n}\n\nexport default Line;\n","import React, {useState} from 'react';\nimport Line from './Line';\nimport './FreqInput.css';\n\nconst log = (...m) => console.log(...m);\nconst $ = (sel) => document.querySelector(sel);\n\nconst getRelativeMouse = (event, parent) => { \n  const box = parent.getBoundingClientRect();\n  return {\n    ...box,\n    left: event.clientX - box.left,\n    top: event.clientY - box.top,\n  }\n};\n\nconst getLineX = (e) => {\n      const f = $('#freqInput');\n      let {left} = getRelativeMouse(e, f);\n      let x = left - lineWidth;\n      return x;\n};\n\nconst lineWidth = 9 / 2 + 1;\nfunction FreqInput() {\n  const [lines, setLines] = useState([50,100]);\n  const [selectedLine, setSelectedLine] = useState();\n  const [tempLine, setTempLine] = useState();\n\n  const moveLine = (e) => {\n    const x = (e.buttons === 1) ? getLineX(e) : null;\n    if (x) {\n      setTempLine(x);\n    }\n  }\n  const placeLine = (e) => {\n      const x = getLineX(e);\n      if (x && !lines.includes(x) ) {\n        setLines([...lines, x]);\n        setTempLine(null);\n      }\n  }\n\n  const onSelectLine = (e) => {\n    log('wtf');\n  }\n  let selected = false;\n  const makeLine = (line, i) => {\n    if (!line) return;\n    const key = `${line}--${i}`;\n    return (<Line key={key} selected={selected} onSelectLine={onSelectLine} line={line}/>);\n  };\n  const lineElements = lines.map(makeLine);\n  selected = true;\n  const tempLineElement = makeLine(tempLine);\n  return (\n    <div \n      id=\"freqInput\" \n      className=\"freqInput\" \n      onMouseMove={moveLine} \n      onMouseDown={moveLine}\n      onMouseUp={placeLine}\n    >\n      {lineElements}\n      {tempLineElement} \n    </div>\n  );\n}\n\nexport default FreqInput;\n","import React, { Component } from 'react';\nimport FreqInput from './FreqInput';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <FreqInput />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
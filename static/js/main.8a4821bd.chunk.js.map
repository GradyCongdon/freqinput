{"version":3,"sources":["util.js","events.js","FreqButton.js","Line.js","FreqInput.js","App.js","serviceWorker.js","index.js"],"names":["log","_console","console","apply","arguments","getLineX","e","options","min","max","offset","_getRelativeMouse","event","parent","box","currentTarget","getBoundingClientRect","clientX","x","clientY","y","getRelativeMouse","width","num","clamp","Math","round","FreqButton","props","react_default","a","createElement","onClick","children","Line","line","onSelectLine","status","keyboard","undefined","classNames","join","styles","transform","concat","className","id","style","data-freq","PLACE","EDIT","FreqInput","_this","this","_useState","useState","_useState2","Object","slicedToArray","lines","setLines","_useState3","_useState4","activeLine","setActiveLine","_useState5","_useState6","selectedKey","setSelectedKey","_useState7","_useState8","mode","setMode","keys","setLine","l","loc","includes","length","code","newlines","toConsumableArray","indexOf","push","lineOptions","selectLine","key","Lines","map","i","k","up","src_Line","bind","full","ActiveLine","onMouseMove","onMouseOver","focus","onMouseUp","onKeyDown","tabIndex","FreqButton_FreqButton","sort","b","App","src_FreqInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAAaA,EAAM,eAAAC,EAAA,OAAUA,EAAAC,SAAQF,IAARG,MAAAF,EAAAG,YCUhBC,EAAW,SAACC,EAAGC,GAAY,IAC1BC,EAAoBD,EAApBC,IAAKC,EAAeF,EAAfE,IAAKC,EAAUH,EAAVG,OADgBC,EARR,SAACC,EAAOC,GAEtC,IAAMC,GADND,EAASA,GAAUD,EAAMG,eACNC,wBAGnB,OAFAF,EAAG,EAAQF,EAAMK,QAAUH,EAAII,EAC/BJ,EAAG,EAAQF,EAAMO,QAAUL,EAAIM,EACxBN,EAKcO,CAAiBf,GAA7BY,EAF6BP,EAE7BO,EAAGI,EAF0BX,EAE1BW,MAER,OADAJ,EDXe,SAACK,EAAKf,EAAKC,GAAX,OAAmBc,GAAOf,EAAMA,EAAMe,GAAOd,EAAMA,EAAMc,ECWpEC,CAAMC,KAAKC,MAAMR,EAAIR,GAASF,GAAO,EAAIC,GAAOa,UCV3C,SAASK,EAAWC,GACjC,OACEC,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,EAAMI,SACpBJ,EAAMK,gBCuBEC,MA1Bf,SAAcN,GAAO,IACVO,EAAwCP,EAAxCO,KAAMC,EAAkCR,EAAlCQ,aAAcC,EAAoBT,EAApBS,OAAQC,EAAYV,EAAZU,SACnC,QAAYC,GAARJ,EAAmB,OAAO,KAC9B,IAIMK,EAAaH,EAAOI,KAAK,KAAO,QAChCC,EAAS,CACbC,UAAS,cAAAC,OAAgBT,EAAhB,QAEX,OACCN,EAAAC,EAAAC,cAAA,OAAKc,UAAWL,EACXM,GAAIX,EACJY,MAAOL,EACPM,YAAWb,EACXG,SAAUA,EACVN,QAdU,SAAC1B,GACV8B,GACLA,MAcEP,EAAAC,EAAAC,cAAA,SAAOc,UAAU,QAAQV,GACzBN,EAAAC,EAAAC,cAAA,SAAOc,UAAU,YAAYP,KCf/BW,SAAQ,SACRC,EAAO,OAmIEC,MAlIf,WAAqB,IAAAC,EAAAC,KAAAC,EAEOC,mBAAS,IAFhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEZK,EAFYH,EAAA,GAELI,EAFKJ,EAAA,GAAAK,EAGiBN,qBAHjBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGZE,EAHYD,EAAA,GAGAE,EAHAF,EAAA,GAAAG,EAImBV,qBAJnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIZE,EAJYD,EAAA,GAICE,EAJDF,EAAA,GAAAG,EAKKd,mBAASN,GALdqB,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKZE,EALYD,EAAA,GAKNE,EALMF,EAAA,GAObG,EAAO,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAO5CC,EAAU,SAACC,EAAGC,GAClB,IAAsBjB,EAAMkB,SAASF,OAJlBhB,EAAMmB,OAAS,EAAIL,EAAKK,SACbf,GAAcI,GAI5C,CACA,IATmBY,EASbC,EAAQvB,OAAAwB,EAAA,EAAAxB,CAAOE,GACjBiB,GAAsB,kBAARA,EAChBI,EAASJ,GAAOD,EACPC,GAAsB,kBAARA,EACvBI,GAbiBD,EAaIH,EAbKH,EAAKS,QAAQH,KAaVJ,EAE7BK,EAASG,KAAKR,GAEhB3E,EAAI,MAAOgF,GACXpB,EAASoB,KAGLI,EAAc,CAClB5E,IAAK,EACLC,IAAK,IACLC,QAAS,IAkBL2E,EAAa,SAACC,GAClB,IAAOnB,GAAeA,IAAgBmB,IAASb,EAAKI,SAASS,GAG3D,OAFAtB,EAAc,WACdI,EAAe,MAIjB,OADAA,EAAekB,GACPf,GACN,KAAKtB,EACHe,EAAcD,GACd,MACF,KAAKb,EACHc,GArDce,EAqDWO,EArDF3B,EAAMc,EAAKS,QAAQH,MAsD1CP,EAAQvB,GAtDK,IAAC8B,GAsEdQ,EAAQ5B,EAAM6B,IAAI,SAACrD,EAAMsD,GAC7B,IAAMC,EAAIjB,EAAKgB,GACTE,EAAKxB,IAAgBuB,EAAI,KAAO,GACtC,OACE7D,EAAAC,EAAAC,cAAC6D,EAAD,CAAMzD,KAAMA,EACVmD,IAAKnD,EACLG,SAAUoD,EACVrD,OAAQ,CAACsD,EAAIpB,GACbnC,aAAcmC,IAASrB,EAAOmC,EAAWQ,KAAKzC,EAAMsC,GAAK,SAUzDI,EAAQnC,EAAMmB,SAAWL,EAAKK,QAAWX,EAAwB,GAAT,OAExD4B,GAAcD,GAClBjE,EAAAC,EAAAC,cAAC6D,EAAD,CAAMN,IAAI,SACJhD,SAAU6B,GAAeM,EAAKd,EAAMmB,QACpCzC,OAAQ,CAAC,YACTF,KAAM4B,IAId,OACElC,EAAAC,EAAAC,cAAA,WAASc,UAAU,SACjBhB,EAAAC,EAAAC,cAAA,OACEc,UAAW,CAAC,YAAaiD,EAAMvB,GAAM9B,KAAK,KAC1CuD,YAAazB,IAAStB,EAnEX,SAAC3C,GAChB,IAAMqE,EAAItE,EAASC,EAAG8E,GACtBpB,EAAcW,IAiE+B,KACzCsB,YAAa1B,IAAStB,EA5Cd,SAAC3C,GACbA,EAAES,cAAcmF,SA2C0B,KACtCC,UAAW5B,IAAStB,EA7ET,SAAC3C,GAChB,IAAMqE,EAAItE,EAASC,EAAG8E,GACtBV,EAAQC,EAAGR,GACXH,EAAc,MACdI,EAAe,OAyE6B,KACxCgC,UAAW,SAAA9F,GAAC,OAAI+E,EAAW/E,EAAEgF,MAC7Be,SAAS,KAETxE,EAAAC,EAAAC,cAAA,OAAKc,UAAU,WACd0C,EACAQ,GAEHlE,EAAAC,EAAAC,cAAA,WAASc,UAAU,WACjBhB,EAAAC,EAAAC,cAACuE,EAAD,CAAYtE,QAlDA,WAChB,IAAMgD,EAAQvB,OAAAwB,EAAA,EAAAxB,CAAOE,GACrBqB,EAASuB,KAAK,SAACzE,EAAE0E,GAAH,OAAS1E,EAAI0E,IAC3B5C,EAASoB,KA+CL,QACAnD,EAAAC,EAAAC,cAACuE,EAAD,CAAYtE,QA/BC,SAAC1B,GAClBkE,EAAQD,IAAStB,EAAQC,EAAOD,GAChCe,EAAc,QA6BwBO,IAAStB,EAAQ,OAAS,YCzHrDwD,0LANX,OACE5E,EAAAC,EAAAC,cAAC2E,EAAD,aAHYC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrF,EAAAC,EAAAC,cAACoF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8a4821bd.chunk.js","sourcesContent":["export const log = (...m) => console.log(...m);\nexport const $ = (sel) => document.querySelector(sel);\nexport const clamp = (num, min, max) => num <= min ? min : num >= max ? max : num;\n","import {clamp} from './util';\n\nexport const getRelativeMouse = (event, parent) => { \n  parent = parent || event.currentTarget;\n  const box = parent.getBoundingClientRect();\n  box['x'] = event.clientX - box.x\n  box['y'] = event.clientY - box.y;\n  return box;\n};\n\nexport const getLineX = (e, options) => {\n      const { min, max, offset} = options\n      let {x, width} = getRelativeMouse(e);\n      x = clamp(Math.round(x + offset), min || 0,  max || width);\n      return x;\n};\n\n","import React from 'react';\nimport './FreqButton.css';\n\nexport default function FreqButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n}\n\n","import React from 'react';\nimport './Line.css';\n\nfunction Line(props) {\n    const {line, onSelectLine, status, keyboard} = props;\n    if (line == undefined) return null; // Line can be 0\n    const onClick = (e) => {\n      if (!onSelectLine) return;\n      onSelectLine();\n    }\n    const classNames = status.join(' ') + \" line\";\n    const styles = {\n      transform: `translateX(${line}px)`,\n    };\n    return (\n     <div className={classNames}\n          id={line} \n          style={styles} \n          data-freq={line}\n          keyboard={keyboard}\n          onClick={onClick}\n      >\n        <label className=\"freq\">{line}</label>\n        <label className=\"keyboard\">{keyboard}</label>\n      </div>\n    );\n}\n\n\nexport default Line;\n","import React, { useState } from 'react';\nimport { getLineX } from './events';\nimport { log } from './util';\nimport FreqButton from './FreqButton';\nimport Line from './Line';\nimport './FreqInput.css';\n\n\nconst PLACE = 'place'\nconst EDIT = 'edit';\nfunction FreqInput() {\n\n  const [lines, setLines] = useState([]);\n  const [activeLine, setActiveLine] = useState();\n  const [selectedKey, setSelectedKey] = useState();\n  const [mode, setMode] = useState(PLACE);\n\n  const keys = ['q','w','e','r','t','y','u','i','o','p'];\n  const getKeyIndex = (code) => keys.indexOf(code);\n  const getKeyLine = (code) => lines[keys.indexOf(code)];\n\n  const isFull = () => lines.length + 1 > keys.length;\n  const isReplacementLine = () => activeLine && selectedKey;\n\n  const setLine = (l, loc) => {\n    if (1 == undefined || lines.includes(l)) return;\n    if (isFull() && !isReplacementLine() ) return;\n    const newlines = [...lines]\n    if (loc && typeof loc === 'number') {\n      newlines[loc] = l;\n    } else if (loc && typeof loc === 'string') {\n      newlines[getKeyIndex(loc)] = l;\n    } else {\n      newlines.push(l);\n    }\n    log('add', newlines);\n    setLines(newlines);\n  }\n\n  const lineOptions = {\n    min: 0,\n    max: 400,\n    offset: -25,\n  }\n\n\n  const downLine = (e) => {\n    const l = getLineX(e, lineOptions);\n    setLine(l, selectedKey);\n    setActiveLine(null);\n    setSelectedKey(null);\n\n  };\n\n  const moveLine = (e) => {\n    const l = getLineX(e, lineOptions);\n    setActiveLine(l);\n  }\n\n\n  const selectLine = (key) => {\n    if ( (!selectedKey && selectedKey === key) || !keys.includes(key)) {\n      setActiveLine(null);\n      setSelectedKey(null);\n      return;\n   }\n    setSelectedKey(key);\n    switch (mode) {\n      case PLACE:\n        setActiveLine(activeLine) // set to last moue pos\n        break;\n      case EDIT:\n        setActiveLine(getKeyLine(key)); // set to line key\n        setMode(PLACE);\n        break;\n    }\n  }\n\n  const focus = (e) => {\n    e.currentTarget.focus();\n  };\n\n  const sortLines = () => {\n    const newlines = [...lines];\n    newlines.sort((a,b) => a - b);\n    setLines(newlines);\n  }\n\n\n  const Lines = lines.map((line, i) => {\n    const k = keys[i];\n    const up = selectedKey === k ? 'up' : '';\n    return (\n      <Line line={line}\n        key={line} \n        keyboard={k} \n        status={[up, mode]} \n        onSelectLine={mode === EDIT ? selectLine.bind(this, k) : null}\n      />\n    );\n  });\n\n  const toggleMode = (e) => {\n    setMode(mode === PLACE ? EDIT : PLACE)\n    setActiveLine(null);\n  };\n\n  const full = (lines.length === keys.length && !selectedKey) ? 'full' : '';\n\n  const ActiveLine = !full && (\n    <Line key=\"active\" \n          keyboard={selectedKey || keys[lines.length]}\n          status={['selected']} \n          line={activeLine}\n    />\n  );\n\n  return (\n    <section className=\"chunk\"> \n      <div \n        className={['freqInput', full, mode].join(' ')}\n        onMouseMove={mode === PLACE ? moveLine : null} \n        onMouseOver={mode === PLACE ? focus : null}\n        onMouseUp={mode === PLACE ?  downLine : null}\n        onKeyDown={e => selectLine(e.key)}\n        tabIndex=\"0\"\n      >\n        <div className=\"border\"></div>\n        {Lines}\n        {ActiveLine}\n      </div>\n      <section className=\"buttons\">\n        <FreqButton onClick={sortLines}>sort</FreqButton>\n        <FreqButton onClick={toggleMode}>{mode === PLACE ? 'edit' : 'place'}</FreqButton>\n      </section>\n    </section>\n  );\n}\n\n\nexport default FreqInput;\n","import React, { Component } from 'react';\nimport FreqInput from './FreqInput';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <FreqInput />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
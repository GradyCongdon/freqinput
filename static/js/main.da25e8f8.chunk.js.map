{"version":3,"sources":["util.js","events.js","FreqButton.js","Line.js","FreqInput.js","App.js","serviceWorker.js","index.js"],"names":["log","_console","console","apply","arguments","getLineX","e","length","undefined","num","min","max","_getRelativeMouse","event","parent","box","currentTarget","getBoundingClientRect","clientX","x","clientY","y","getRelativeMouse","width","Math","round","FreqButton","props","react_default","a","createElement","onClick","children","Line","line","setSelectedLine","status","keyboard","classNames","join","styles","transform","concat","className","id","style","data-freq","FreqInput","_useState","useState","_useState2","Object","slicedToArray","lines","setLines","_useState3","_useState4","activeLine","setActiveLine","_useState5","_useState6","selectedKey","setSelectedKey","keys","nextKey","addLine","l","loc","includes","code","newlines","toConsumableArray","indexOf","push","Lines","map","i","k","up","src_Line","key","full","onMouseMove","onMouseOver","focus","onMouseUp","onKeyDown","tabIndex","keydown","FreqButton_FreqButton","sort","b","App","src_FreqInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da25e8f8.chunk.js","sourcesContent":["export const log = (...m) => console.log(...m);\nexport const $ = (sel) => document.querySelector(sel);\nexport const clamp = (num, min, max) => num <= min ? min : num >= max ? max : num;\n","import {clamp} from './util';\n\nexport const getRelativeMouse = (event, parent) => { \n  parent = parent || event.currentTarget;\n  const box = parent.getBoundingClientRect();\n  box['x'] = event.clientX - box.x;\n  box['y'] = event.clientY - box.y;\n  return box;\n};\n\nexport const getLineX = (e, border = 1) => {\n      let {x, width} = getRelativeMouse(e);\n      x = clamp(Math.round(x), 0, width);\n      return x;\n};\n","import React from 'react';\nimport './FreqButton.css';\n\nexport default function FreqButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n}\n\n","import React from 'react';\nimport './Line.css';\n\nfunction Line(props) {\n    const {line, setSelectedLine, status, keyboard} = props;\n    if (!line) return null;\n    const classNames = status.join(' ') + \" line\";\n    const styles = {\n      transform: `translateX(${line}px)`,\n    };\n    return (\n     <div className={classNames}\n          id={line} \n          onClick={setSelectedLine}\n          style={styles} \n          data-freq={line}\n          keyboard={keyboard}\n      >\n        <label className=\"freq\">{line}</label>\n        <label className=\"keyboard\">{keyboard}</label>\n      </div>\n    );\n}\n\n\nexport default Line;\n","import React, { useState } from 'react';\nimport { getLineX } from './events';\nimport { log } from './util';\nimport FreqButton from './FreqButton';\nimport Line from './Line';\nimport './FreqInput.css';\n\nfunction FreqInput(props) {\n  const [lines, setLines] = useState([]);\n  const [activeLine, setActiveLine] = useState();\n  const [selectedKey, setSelectedKey] = useState();\n\n\n  const keys = ['q','w','e','r','t','y','u','i','o','p'];\n  const nextKey = keys[lines.length];\n  const getKeyIndex = (code) => keys.indexOf(code);\n  const getKeyLine = (code) => lines[keys.indexOf(code)];\n\n  const addLine = (l, loc) => {\n    if (!l || lines.includes(l) || lines.length + 1 > keys.length) return;\n    const newlines = [...lines]\n    if (loc && typeof loc === 'number') {\n      newlines[loc] = l;\n    } else if (loc && typeof loc === 'string') {\n      newlines[getKeyIndex(loc)] = l;\n    } else {\n      newlines.push(l);\n    }\n    log('add', newlines);\n    setLines(newlines);\n  }\n\n\n  const downLine = (e) => {\n    log('down');\n    const l = getLineX(e);\n    addLine(l, selectedKey);\n    setActiveLine(null);\n    setSelectedKey(null);\n  };\n\n  const moveLine = (e) => {\n    const l = getLineX(e);\n    setActiveLine(l);\n  }\n\n  const selectLine = (e) => {\n    const { key:code } = e;\n    log('select', code);\n    if ( (!selectedKey && selectedKey === code) || !keys.includes(code)) {\n      setActiveLine(null);\n      setSelectedKey(null);\n      return;\n   }\n    setSelectedKey(code);\n    setActiveLine(activeLine); // set to \"mouse\" pos\n  }\n\n  const focus = (e) => {\n    log('focus');\n    e.currentTarget.focus();\n  };\n\n  const sortLines = () => {\n    const newlines = [...lines];\n    newlines.sort((a,b) => a - b);\n    setLines(newlines);\n  }\n\n\n  const Lines = lines.map((line, i) => {\n    const k = keys[i]\n    const up = selectedKey === k ? 'up' : '';\n    return (<Line key={line} keyboard={k} status={[up]} line={line}/>)\n  });\n\n  const full = (lines.length === keys.length && !selectedKey) ? 'full' : '';\n\n\n  return (\n    <section> \n      <div \n        className={['freqInput', full].join(' ')}\n        onMouseMove={moveLine} \n        onMouseOver={focus}\n        onMouseUp={downLine}\n        onKeyDown={selectLine}\n        tabIndex=\"0\"\n      >\n        {props.keydown}\n        {Lines}\n        {!full && <Line key=\"active\" keyboard={selectedKey || nextKey} status={['selected']} line={activeLine}/>} </div>\n      <FreqButton onClick={sortLines}>sort</FreqButton>\n    </section>\n  );\n}\n\n\nexport default FreqInput;\n","import React, { Component } from 'react';\nimport FreqInput from './FreqInput';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <FreqInput />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
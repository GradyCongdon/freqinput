{"version":3,"sources":["events.js","util.js","Line.js","FreqInput.js","App.js","serviceWorker.js","index.js"],"names":["getLineX","e","arguments","length","undefined","num","min","max","_getRelativeMouse","event","parent","box","currentTarget","getBoundingClientRect","clientX","x","clientY","y","getRelativeMouse","width","Math","round","Line","props","line","setSelectedLine","selected","keyboard","classNames","join","styles","transform","concat","react_default","a","createElement","className","id","onClick","style","data-freq","FreqInput","_useState","useState","_useState2","Object","slicedToArray","lines","setLines","_useState3","_useState4","activeLine","setActiveLine","moveLine","buttons","keys","Lines","map","i","k","pop","src_Line","key","onSelectLine","ActiveLine","onMouseMove","onMouseDown","onMouseUp","includes","toConsumableArray","App","src_FreqInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAUaA,EAAW,SAACC,GAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,OCRrBG,EAAKC,EAAKC,EDQWC,EARX,SAACC,EAAOC,GAEtC,IAAMC,GADND,EAASA,GAAUD,EAAMG,eACNC,wBAGnB,OAFAF,EAAG,EAAQF,EAAMK,QAAUH,EAAII,EAC/BJ,EAAG,EAAQF,EAAMO,QAAUL,EAAIM,EACxBN,EAIcO,CAAiBjB,GAA7Bc,EADgCP,EAChCO,EAAGI,EAD6BX,EAC7BW,MAER,OCXgBd,EDUNe,KAAKC,MAAMN,GCVKR,EDUEY,EAA5BJ,ECVkCV,IAAbC,EDUI,GCVsBA,EAAMD,GAAOE,EAAMA,EAAMF,SCsB/DiB,MArBf,SAAcC,GAAO,IACVC,EAA6CD,EAA7CC,KAAMC,EAAuCF,EAAvCE,gBAAiBC,EAAsBH,EAAtBG,SAAUC,EAAYJ,EAAZI,SAClCC,EAAa,CAAC,OAAQF,EAAW,WAAa,IAAIG,KAAK,KACvDC,EAAS,CACbC,UAAS,cAAAC,OAAgBR,EAAhB,QAEX,OACCS,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,EACXS,GAAIb,EACJc,QAASb,EACTc,MAAOT,EACPU,YAAWhB,EACXG,SAAUA,GAEZM,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQZ,GACzBS,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYT,WCyBtBc,MAtCf,WAAqB,IAAAC,EACOC,mBAAS,CAAC,GAAG,MADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACLI,EADKJ,EAAA,GAAAK,EAEiBN,qBAFjBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEZE,EAFYD,EAAA,GAEAE,EAFAF,EAAA,GAIbG,EAAW,SAACpD,GAChB,IAAMc,EAAmB,IAAdd,EAAEqD,QAAiBtD,EAASC,GAAK,KACxCc,GACFqC,EAAcrC,IAWZwC,EAAO,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KACpDC,EAAQT,EAAMU,IAAI,SAACjC,EAAMkC,GAC7B,IAAMC,EAAIJ,EAAKK,MACf,OAAQ3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAMC,IAAKH,EAAGhC,SAAUgC,EAAGI,aAAcX,EAAe5B,KAAMA,MAElEwC,EAAc/B,EAAAC,EAAAC,cAAC0B,EAAD,CAAMC,IAAI,SAASpC,SAAS,OAAOF,KAAM2B,IAC7D,OACElB,EAAAC,EAAAC,cAAA,OACEE,GAAG,YACHD,UAAU,YACV6B,YAAaZ,EACba,YAAab,EACbc,UAnBc,SAAClE,GACf,IAAMc,EAAIf,EAASC,GACfc,IAAMgC,EAAMqB,SAASrD,KACvBiC,EAAQ,GAAAhB,OAAAa,OAAAwB,EAAA,EAAAxB,CAAKE,GAAL,CAAYhC,KACpBqC,EAAc,SAiBfI,EACAQ,IC1BQM,0LANX,OACErC,EAAAC,EAAAC,cAACoC,EAAD,aAHYC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.83c24bb2.chunk.js","sourcesContent":["import {clamp} from './util';\n\nexport const getRelativeMouse = (event, parent) => { \n  parent = parent || event.currentTarget;\n  const box = parent.getBoundingClientRect();\n  box['x'] = event.clientX - box.x;\n  box['y'] = event.clientY - box.y;\n  return box;\n};\n\nexport const getLineX = (e, border = 1) => {\n      let {x, width} = getRelativeMouse(e);\n      x = clamp(Math.round(x), 0, width);\n      return x;\n};\n","export const log = (...m) => console.log(...m);\nexport const $ = (sel) => document.querySelector(sel);\nexport const clamp = (num, min, max) => num <= min ? min : num >= max ? max : num;\n","import React from 'react';\nimport './Line.css';\n\nfunction Line(props) {\n    const {line, setSelectedLine, selected, keyboard} = props;\n    const classNames = [\"line\", selected ? \"selected\" : ''].join(' ');\n    const styles = {\n      transform: `translateX(${line}px)`,\n    };\n    return (\n     <div className={classNames}\n          id={line} \n          onClick={setSelectedLine}\n          style={styles} \n          data-freq={line}\n          keyboard={keyboard}\n      >\n        <label className=\"freq\">{line}</label>\n        <label className=\"keyboard\">{keyboard}</label>\n      </div>\n    );\n}\n\n\nexport default Line;\n","import React, {useState} from 'react';\nimport { getLineX } from './events';\nimport Line from './Line';\nimport './FreqInput.css';\n\nfunction FreqInput() {\n  const [lines, setLines] = useState([50,100]);\n  const [activeLine, setActiveLine] = useState();\n\n  const moveLine = (e) => {\n    const x = (e.buttons === 1) ? getLineX(e) : null;\n    if (x) {\n      setActiveLine(x);\n    }\n  }\n\n  const placeLine = (e) => {\n      const x = getLineX(e);\n      if (x && !lines.includes(x) ) {\n        setLines([...lines, x]);\n        setActiveLine(null);\n      }\n  };\n  const keys = [']','[','p','o','i','u','y','t','r','e','w','q'];\n  const Lines = lines.map((line, i) => {\n    const k = keys.pop();\n    return (<Line key={k} keyboard={k} onSelectLine={setActiveLine} line={line}/>)\n  });\n  const ActiveLine = (<Line key=\"active\" selected=\"true\" line={activeLine}/>);\n  return (\n    <div \n      id=\"freqInput\" \n      className=\"freqInput\" \n      onMouseMove={moveLine} \n      onMouseDown={moveLine}\n      onMouseUp={placeLine}\n    >\n      {Lines}\n      {ActiveLine}\n    </div>\n  );\n}\n\nexport default FreqInput;\n","import React, { Component } from 'react';\nimport FreqInput from './FreqInput';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <FreqInput />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}